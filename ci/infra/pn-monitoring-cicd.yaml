AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys an EventBridge Rule and CloudWatch alarm to monitor vulnerabilities in ECR images'

Resources:

  # Rule triggered when a Critical Vulnerabilities is detected by the ECR Scan
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "ECRCriticalVulnerabilitiesDetected"
      Description: Triggered when Critical Vulnerabilities are detected when an ECR image is scanned
      EventPattern: |
        {
          "source": ["aws.ecr"],
          "detail-type": ["ECR Image Scan"],
          "detail": {
            "scan-status": ["COMPLETE"],
            "finding-severity-counts": {
              "CRITICAL": [{
                "numeric": [">", 0]
              }]
            }
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogGroupRuleTarget.Arn
          Id: LogTarget
        - Arn: !GetAtt SlackNotificationLambda.Arn
          Id: SlackNotificationLambda

  # Log Group Target of the Event Bridge Rule
  LogGroupRuleTarget:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/events/ecr-critical-vulnerabilities"
      RetentionInDays: 14

  SlackNotificationLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/SlackMessageNotificationLambda"
      RetentionInDays: 14
  
  LogGroupRuleTargetPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: "EventBridgeToCWLogsPolicy"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${LogGroupRuleTarget.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${LogGroupRuleTarget.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${EventRule.Arn}"}
              }
            }
          ]
        }

  PermissionForEventsToInvokeKeyRotationLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SlackNotificationLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn

  # Metric based on logs arriving in the log group
  LogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref LogGroupRuleTarget
      FilterPattern: "{ $.detail.finding-severity-counts.CRITICAL > 0 }"
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: ECRVulnerabilities
          MetricName: ImageCriticalVulnerabilities

  # Alarm based on the Metric Filter
  ECRAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:  "ECR-Critical-Vulnerabilities"
      AlarmDescription: "CloudWatch alarm for ECR Critical Vulnerabilities detected"
      TreatMissingData: notBreaching        
      DatapointsToAlarm: 1            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Period: 60
      Namespace: ECRVulnerabilities   
      MetricName: ImageCriticalVulnerabilities
      Statistic: Sum
      Threshold: 1

  SlackNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SlackMessageNotificationLambda
      Description: The lambda sends message to slack channel
      Runtime: nodejs22.x
      ReservedConcurrentExecutions: 1
      Handler: index.handler
      Environment:
        Variables:
          STATEFUL_BUCKET: !Ref EcrMonitoringBucket
      Code: 
        ZipFile: |
          const https = require('https');
          const util = require('util');
          const { S3Client, GetObjectCommand, PutObjectCommand } = require("@aws-sdk/client-s3");
          const { ECRClient, DescribeRegistryCommand, DescribeImageScanFindingsCommand } = require("@aws-sdk/client-ecr");

          async function getJsonFromS3(awsClient, bucket, key) {
            const s3 = new S3Client();
            const command = new GetObjectCommand({ Bucket: bucket, Key: key });

            try {
              const response = await awsClient.send(command);

              const streamToString = (stream) =>
                new Promise((resolve, reject) => {
                  const chunks = [];
                  stream.on("data", (chunk) => chunks.push(chunk));
                  stream.on("error", reject);
                  stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf-8")));
                });

              const data = await streamToString(response.Body);
              return JSON.parse(data);

            } catch (err) {
              if (err.name === "NoSuchKey" || err.$metadata?.httpStatusCode === 404) {
                console.warn(`File non trovato: s3://${bucket}/${key}`);
                return {}; // ← fallback: oggetto vuoto
              } else {
                console.error("Errore nel recupero da S3:", err);
                throw err; // altri errori li rilancio
              }
            }
          }

          async function putJsonToS3(awsClient, bucketName, key, data) {
            const fileContent = JSON.stringify(data, null, 2);

            const params = {
              Bucket: bucketName,
              Key: key,
              Body: fileContent,
              ContentType: "application/json"
            };
            await awsClient.send(new PutObjectCommand(params));
            console.log(`File caricato su S3: s3://${bucketName}/${key}`);
          }

          async function describeImageScanFindings(awsClient, registryId, event) {
            const input = { // DescribeImageScanFindingsRequest
              registryId: registryId,
              repositoryName: event['repository-name'], // required
              imageId: {
                imageDigest: event['image-digest'],
                imageTag: event['image-tags'][0],
              },
              maxResults: 100,
            };
            const command = new DescribeImageScanFindingsCommand(input);
            const response = await awsClient.send(command);
            return response
          }

          async function getParameterOrSecretFromStore(name, isSecret) {
            let url;
            if(isSecret) {
              url = `http://localhost:2773/secretsmanager/get?secretId=${encodeURIComponent(name)}`
            }
            else {
              url = `http://localhost:2773/systemsmanager/parameters/get?name=${encodeURIComponent(
                name
              )}`
            }
            try {
              const response = await fetch(
                url,
                {
                  headers: {
                    'Content-Type': 'application/json',
                    "X-Aws-Parameters-Secrets-Token": process.env.AWS_SESSION_TOKEN,
                  },
                }
              );
              
              const data = await response.json()
              if(!isSecret)
                return data.Parameter.Value;
              return data.SecretString || JSON.stringify(data.SecretBinary);
            } catch (err) {
              console.error("Error in get parameter ", err);
              return ''; // fallback to empty string
              // throw new Error("Error in get parameter "+parameterName);
            }
          }

          async function getRegistryId(awsClient) {
            const input = {};
            const command = new DescribeRegistryCommand(input);
            const response = await awsClient.send(command);
            return response.registryId;
          }

          function prepareTagList(tagList){
            return tagList.map(item => `- \`${item.length > 30 ? item.slice(0, 30) + "..." : item}\``).join('\n');
          }

          function prepareFindingList(findingsList){
            return findingsList.map(item => `- <${item.uri}|${item.name}>`).join('\n');
          }

          function prepareMessage(detailType, event, vulnerabilities ,templateMap) {
            
            const template = templateMap[detailType]

            if (!template || !event.detail) return null;
            console.log(detailType)
            if (detailType === "ECRImageScan") {
              
              const repo = event.detail["repository-name"];
              const tags = prepareTagList(event.detail["image-tags"]);
              const critical = vulnerabilities;
              console.log(`${repo} ${tags} ${critical}`)
              
              return util.format(JSON.stringify(template), event["detail-type"], repo, critical, tags)
            }

            return null;
          }

          async function postMessageToSlack(token, data) {
            const response = await fetch('https://slack.com/api/chat.postMessage', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
              },
              body: data,
            });

            if (!response.ok) {
              throw new Error(`Slack API error: ${response.status} ${response.statusText}`);
            }

            const result = await response.json();
            return result;
          }

          exports.handler = async (event) => {
            try {

              const channelTemplate = await getParameterOrSecretFromStore("slack_channel_template", false);
              const slackToken = await getParameterOrSecretFromStore("slack/app_token", true);
              const bucketName = process.env.STATEFUL_BUCKET;
              const s3Client = new S3Client();

              const fileName = `${event.detail['repository-name']}-${(event.detail['image-digest']).split(':')[1]}.json`
              const lastState = await getJsonFromS3(s3Client, bucketName, fileName)
              
              const detailType = event["detail-type"].replace(/\s/g, "");

              const ecrClient = new ECRClient();
            
              /**Retrieving registry id**/
              const registryId = await getRegistryId(ecrClient);

              const { imageScanFindings } = await describeImageScanFindings(ecrClient, registryId, event.detail)
              const criticalFindings = prepareFindingList(imageScanFindings.findings.filter(x => {
                return x.severity === 'CRITICAL'
              }))

              if(criticalFindings === lastState) {
                return { statusCode: 200, body: "Messaggio non inviato a Slack. Criticità già note." };
              }
              else {
                await putJsonToS3(s3Client, bucketName, fileName, criticalFindings)
              }

              const body = prepareMessage(detailType, event, criticalFindings, JSON.parse(channelTemplate));
              console.log(body)
              if (!body) {
                console.error("Messaggio Slack non generato. Controlla il contenuto dell'evento:", JSON.stringify(event, null, 2));
                return { statusCode: 400, body: "Messaggio non generato." };
              }
              
              const result = await postMessageToSlack(JSON.parse(slackToken)[detailType], body);
              console.log("Messaggio Slack inviato:", result);
              return { statusCode: 200, body: "Messaggio inviato a Slack." };

            } catch (err) {
              console.error("Errore Lambda:", err);
              return { statusCode: 500, body: "Errore interno" };
            }
          };

      MemorySize: 128
      Timeout: 120
      Role: !GetAtt SlackNotificationLambdaRole.Arn
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:187925254637:layer:AWS-Parameters-and-Secrets-Lambda-Extension:17"

  SlackNotificationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SlackNotificationLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
      Path: /
      Policies:
        - PolicyName: "LambdaSlackNotificationPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !GetAtt SlackNotificationLambdaLogGroup.Arn
              - Sid: AllowLambdaToGetSecret
                Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:slack/*"
              - Sid: AllowLambdaToGetParameter
                Action:
                  - ssm:GetParameter
                Effect: Allow
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
              - Sid: AllowLambdaToS3
                Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAcl
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub ${EcrMonitoringBucket.Arn}
                  - !Sub ${EcrMonitoringBucket.Arn}/*
              - Sid: AllowLambdaToRegistry
                Action:
                  - ecr:DescribeRegistry
                Effect: Allow
                Resource: 
                  - "*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
              - Sid: AllowLambdaToDescribeEcrScan
                Action:
                  - ecr:DescribeImageScanFindings
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"

  ScanEcrImagesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaECRImagesScanStarter
      Description: The lambda execute the scan of the latest versions of ECR repository images
      Runtime: nodejs22.x
      Handler: index.lambda_handler
      Code: 
        ZipFile: |
          const { ECRClient, DescribeRepositoriesCommand, DescribeRegistryCommand, DescribeImagesCommand, StartImageScanCommand } = require("@aws-sdk/client-ecr");

          const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
          const STABLE_REGEX = /(?:.*-)?\d+\.\d+\.\d+$/;
          const SNAPSHOT_REGEX = /(?:.*-)?\d+\.\d+\.\d+-SNAPSHOT$/;
          const RC_REGEX = /(?:.*-)?\d+\.\d+\.\d+-RC\.\d+$/;

          async function getAllElements(func, param, ...args) {
            let nextToken = undefined;
            let first = true
            let elements = []
            while(first || nextToken) {
              first = false;
              let result = await func(...args, nextToken)
              nextToken = result.nextToken
              elements = elements.concat(result[param])
            }
            return elements
          }

          async function getRegistryId(awsClient) {
            const input = {};
            const command = new DescribeRegistryCommand(input);
            const response = await awsClient.send(command);
            return response.registryId;
          }

          async function getRepositoriesList(awsClient, registryId, nextToken){
            const input = { // DescribeRepositoriesRequest
              registryId: registryId,
              maxResults:  100,
            };
            nextToken ? input.nextToken = nextToken : null
            const command = new DescribeRepositoriesCommand(input);
            const response = await awsClient.send(command);
            return response
          }


          async function getRepositoryImagesDescription(awsClient, registryId, repositoryName, nextToken){
            const input = { // ListImagesRequest
              registryId: registryId,
              repositoryName: repositoryName, // required
              maxResults: 100,
              filter: { // ListImagesFilter
                tagStatus: "TAGGED"
              },
            };
            nextToken ? input.nextToken = nextToken : null
            const command = new DescribeImagesCommand(input);
            const response = await awsClient.send(command);
            return response
          }

          async function startImageScan(awsClient, registryId, repositoryName, imageId){
            const input = { // StartImageScanRequest
              registryId: registryId,
              repositoryName: repositoryName, // required
              imageId: imageId // ImageIdentifier
            };
            const command = new StartImageScanCommand(input);
            const response = await awsClient.send(command);
            return response
          }

          function extractLatestImages(images) {
            const stable = [];
            const rc = [];
            const snapshot = [];

            for (const img of images) {
              const tags = img.imageTags || [];
              for (const tag of tags) {
                if (STABLE_REGEX.test(tag)) {
                  stable.push({ ...img, matchedTag: tag });
                } else if (RC_REGEX.test(tag)) {
                  rc.push({ ...img, matchedTag: tag });
                } else if (SNAPSHOT_REGEX.test(tag)) {
                  snapshot.push({ ...img, matchedTag: tag });
                }
              }
            }

            const sortDesc = (a, b) => new Date(b.imagePushedAt) - new Date(a.imagePushedAt);

            return [
              ...stable.sort(sortDesc).slice(0, 2),
              ...rc.sort(sortDesc).slice(0, 1),
              ...snapshot.sort(sortDesc).slice(0, 1)
            ];
          }

          exports.lambda_handler = async (event) => {

            /**Initializing**/
            const now = new Date();
            now.setMonth(now.getMonth() - 6);
            const startingScanDate = now.toISOString()
            const ecrClient = new ECRClient();
            
            /**Retrieving registry id**/
            const registryId = await getRegistryId(ecrClient);

            /**Retrieving repositories*/
            const repositoriesList = await getAllElements(getRepositoriesList, 'repositories', ecrClient, registryId)
            for(const repository of repositoriesList) {
              const repositoryName = repository.repositoryName
                      
              /**Retrieving images of repository*/
              const imagesDescription = await getAllElements(getRepositoryImagesDescription, 'imageDetails', ecrClient, registryId, repositoryName)
              const images = extractLatestImages(imagesDescription);
              console.log(`${repositoryName} - ${images.length}`)
              
              sleep(1000)

              for(const image of images) {
                console.log(image.matchedTag)
                /**Starting image scan**/
                try {
                  const response = await startImageScan(ecrClient, registryId, repositoryName, image)
                }
                catch (err) {
                  console.error("Scan error:", err);
                }
              }
            }
          }

      MemorySize: 128
      Timeout: 300
      Role: !GetAtt LambdaECRImagesScanStarterRole.Arn

  LambdaECRImagesScanStarterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaECRImagesScanStarterRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
      Path: /
      Policies:
        - PolicyName: "LambdaECRImagesScanStarterPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !GetAtt LambdaScannerLogGroup.Arn
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLambdaToRegistry
                Action:
                  - ecr:DescribeRegistry
                Effect: Allow
                Resource: 
                  - "*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
              - Sid: AllowLambdaToEcrReadOnly
                Action:
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLambdaToEcrExecuteScan
                Action:
                  - ecr:StartImageScan
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"

  # Log Group Target of the Event Bridge Rule
  LambdaScannerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/LambdaECRImagesScanStarter"
      RetentionInDays: 14

  ScanLambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to trigger LambdaECRImagesScanStarter"
      ScheduleExpression: "cron(0 9 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScanEcrImagesLambda.Arn
          Id: "LambdaECRImagesScanStarter"


  PermissionForEventsToInvokeScanECRLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ScanEcrImagesLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScanLambdaEventRule.Arn

  EcrMonitoringBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub pn-ecr-monitoring-${AWS::Region}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: ExpireAfter3Months
            Status: Enabled
            ExpirationInDays: 90
