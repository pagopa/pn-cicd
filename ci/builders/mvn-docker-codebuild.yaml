AWSTemplateFormatVersion: '2010-09-09'
Description: CodeBuild for maven docker project
Parameters:
  GitHubProjectName:
    Description: Name of pagopa project name
    Type: String
    Default: pn-delivery
  GitHubDefaultBranch:
    Description: Name of the dafult github branch
    Type: String
    Default: main
  IsPublicProject:
    Description: true if the project is public
    Type: String
    Default: 'true'
  DisableIntegrationTest:
    Description: true if integration test skipped
    Type: String
    Default: 'true'
  CodeArtifactDomainName:
    Description: Used for maven repository access
    Type: String
    Default: pn-develop-bootstrap-step-01-domain
  CodeArtifactRepositoryName:
    Description: Used for maven repository access
    Type: String
    Default: pn-develop-bootstrap-step-01-repo
  NotificationSNSTopic:
    Type: String
    Default: 'none'
    Description: Topic for build and pipeline notification
  ShouldCreateEcrParam:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: ECR creation is needed only the first time

  AllowedDeployAccount1:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount2:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount3:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount4:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount5:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount6:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount7:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount8:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount9:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount10:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount11:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount12:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount13:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount14:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount15:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount16:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount17:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount18:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount19:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount20:
    Type: Number
    Description: Account number allowed to read the artifacts

Conditions:
  CreateEcr:
    Fn::Equals:
      - Ref: ShouldCreateEcrParam
      - 'true'
  
  NeedMediumBuildEnv:
    Fn::Equals:
      - Ref: GitHubProjectName
      - 'pn-delivery-push'

Resources:

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${GitHubProjectName}-CodeBuild"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        ComputeType:
          Fn::If:
            - NeedMediumBuildEnv
            - BUILD_GENERAL1_MEDIUM
            - BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        EnvironmentVariables:
          - Name: IS_PUBLIC_PROJECT
            Type: PLAINTEXT
            Value: !Sub "${IsPublicProject}"
          - Name: SKIP_ITS
            Type: PLAINTEXT
            Value: !Sub "${DisableIntegrationTest}"
          - Name: CODEARTIFACT_DOMAIN_NAME
            Type: PLAINTEXT
            Value: !Sub "${CodeArtifactDomainName}"
          - Name: CODEARTIFACT_DOMAIN_FULL
            Type: PLAINTEXT
            Value:
              Fn::Join:
                - ''
                - - !Sub "${CodeArtifactDomainName}"
                  - !Sub '-${AWS::AccountId}.d.codeartifact.${AWS::Region}.${AWS::URLSuffix}'
          - Name: CODEARTIFACT_REPO
            Type: PLAINTEXT
            Value: !Sub "${CodeArtifactRepositoryName}"
          - Name: GITHUB_PRJ_NAME
            Type: PLAINTEXT
            Value: !Sub "${GitHubProjectName}"
          - Name: GIT_DEFAULT_BRANCH
            Type: PLAINTEXT
            Value: !Sub "${GitHubDefaultBranch}"
          - Name: ECR_URL
            Type: PLAINTEXT
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT
            Value: !Sub "${AWS::Region}"
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
          - Name: SETTINGS
            Type: PLAINTEXT
            Value: |
              <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                http://maven.apache.org/xsd/settings-1.0.0.xsd">
                <profiles>
                  <profile>
                    <id>ci-profile</id>
                    <activation>
                     <property><name>env.CODEBUILD_CI</name></property>
                    </activation>
                    <repositories>
                        <repository>
                        <id>pn-codeartifact-repo</id>
                        <name>AWS Code Artifact</name>
                        <url>https://${env.CODEARTIFACT_DOMAIN_FULL}/maven/${env.CODEARTIFACT_REPO}/</url>
                      </repository>
                    </repositories>
                  </profile>
                </profiles>
                <servers>
                  <server>
                    <id>pn-codeartifact</id>
                    <username>aws</username>
                    <password>${env.CODEARTIFACT_AUTH_TOKEN}</password>
                  </server>
                </servers>
                <mirrors>
                  <mirror>
                    <id>pn-codeartifact</id>
                    <name>pn-codeartifact</name>
                    <url>https://${env.CODEARTIFACT_DOMAIN_FULL}/maven/${env.CODEARTIFACT_REPO}/</url>
                    <mirrorOf>*</mirrorOf>
                  </mirror>
                </mirrors>
              </settings>

      Source:
        Type: GITHUB
        ReportBuildStatus: true
        Location: !Sub 'https://github.com/pagopa/${GitHubProjectName}'
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
            secrets-manager:
              SONAR_TOKEN: arn:aws:secretsmanager:eu-central-1:911845998067:secret:SonarCloud-7370vM:token
          phases:
            install:
              runtime-versions:
                 java: corretto17
            pre_build:
              on-failure: ABORT
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo $SETTINGS > maven-settings.xml
                - export CODEARTIFACT_AUTH_TOKEN=$( aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN_NAME --query authorizationToken --output text )
                - BRANCH_NAME=$(echo $CODEBUILD_WEBHOOK_HEAD_REF | sed 's/refs\/heads\///'); export BRANCH_NAME=${BRANCH_NAME:=$GIT_DEFAULT_BRANCH}
                - export BRANCH_TARGET=$(echo $CODEBUILD_WEBHOOK_BASE_REF | sed 's/refs\/heads\///')
                - export PR_NUM=$(echo $CODEBUILD_SOURCE_VERSION | sed 's/pr\///')
                - export CI_PROFILE="$CODEBUILD_CI"
                - export REPO_URL=https://${CODEARTIFACT_DOMAIN_FULL}/maven/${CODEARTIFACT_REPO}/
                - export MAVEN_CONFIG="--settings maven-settings.xml --no-transfer-progress"
                - export VERSION=$( mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout $MAVEN_CONFIG )
                - export IMAGE_TAG=$VERSION
                - export IMAGE_REPO_NAME=$GITHUB_PRJ_NAME
                - export SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
                - export TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX=911845998067.dkr.ecr.eu-central-1.amazonaws.com/
                - |
                  if ( [ -z "${PR_NUM}" ] ) then
                    export PR_NUM=$(curl -L \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      "https://api.github.com/repos/pagopa/${GITHUB_PRJ_NAME}/pulls?head=pagopa:${BRANCH_NAME}" | jq -r '.[] | .number ')
                      echo "PR_NUM=${PR_NUM}"
                  fi
                - |
                  if ( [ ! -z "${PR_NUM}" ] ) then
                    export BRANCH_TARGET=$(curl -L \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      "https://api.github.com/repos/pagopa/${GITHUB_PRJ_NAME}/pulls/${PR_NUM}" | jq '.base.ref')
                    echo "BRANCH_TARGET=${BRANCH_TARGET}"
                  fi
                - |
                  SRC_DIR=./src/main/java
                  if [ -e $SRC_DIR ]; then
                    if [[ "$BRANCH_NAME" =~ ^(main|develop)|release\/.*$$ ]]; then
                        SONAR_OPTS="-Dsonar.branch.name=$BRANCH_NAME"
                    else 
                        SONAR_OPTS="-Dsonar.pullrequest.key=$PR_NUM -Dsonar.pullrequest.branch=$BRANCH_NAME -Dsonar.pullrequest.base=$BRANCH_TARGET"
                    fi
                    SONAR_OPTS="$SONAR_OPTS -Dsonar.organization=pagopa -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=pagopa_${GITHUB_PRJ_NAME}"
                    SONAR_OPTS="$SONAR_OPTS -Dsonar.scm.disabled=true"
                    if [[ "$IS_PUBLIC_PROJECT" = "true" ]]; then
                      MAVEN_ADD_GOAL=org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
                    fi
                  fi
                  if [ "$SKIP_ITS" = "true" ]; then
                    MAVEN_OPTS="$MAVEN_OPTS -DskipITs"
                  else
                    MAVEN_OPTS="$MAVEN_OPTS"
                  fi
                  MAVEN_OPTS="$MAVEN_OPTS $SONAR_OPTS"
                  export MAVEN_OPTS
                - env
            build:
              on-failure: ABORT
              commands:
                - echo "Maven Build"
                - CUSTOM_BUILDER_IMAGE=public.ecr.aws/c7u1m8f9/paketobuildpacks/builder:0.3.192-base
                - CUSTOM_RUN_IMAGE=public.ecr.aws/c7u1m8f9/paketobuildpacks/run:1.2.58-base-cnb
                - ./mvnw $MAVEN_OPTS clean verify spring-boot:build-image -Dspring-boot.build-image.builder=$CUSTOM_BUILDER_IMAGE -Dspring-boot.build-image.runImage=$CUSTOM_RUN_IMAGE $MAVEN_ADD_GOAL
            post_build:
              on-failure: ABORT
              commands:
                - |
                  if [[ "$BRANCH_NAME" =~ ^(main|develop)|release\/.*$ ]]; then
                    echo "Ensure different image for each commit"
                    DOCKER_FILE=$(mktemp)
                    echo "FROM ${GITHUB_PRJ_NAME}:$VERSION" >$DOCKER_FILE
                    echo "LABEL VCS_COMMIT_ID=${CODEBUILD_RESOLVED_SOURCE_VERSION}" >>$DOCKER_FILE
                    echo "ENV VCS_COMMIT_ID=${CODEBUILD_RESOLVED_SOURCE_VERSION}" >>$DOCKER_FILE
                    cat $DOCKER_FILE
                    docker build --tag "${GITHUB_PRJ_NAME}:${VERSION}" - < $DOCKER_FILE
                    echo "Deploy"
                    docker tag ${GITHUB_PRJ_NAME}:$VERSION $ECR_URL/${IMAGE_REPO_NAME}:$IMAGE_TAG
                    docker tag ${GITHUB_PRJ_NAME}:$VERSION $ECR_URL/${IMAGE_REPO_NAME}:latest
                    docker image ls
                    echo Build completed on `date`
                    echo Pushing the Docker image...
                    docker push $ECR_URL/${IMAGE_REPO_NAME}:$IMAGE_TAG
                    docker push $ECR_URL/${IMAGE_REPO_NAME}:latest
                    echo Generate build event
                    IMAGE_URL_WITH_SHA=$( docker inspect --format='{{index .RepoDigests 0}}' $ECR_URL/${IMAGE_REPO_NAME}:latest )
                    EVENT_DETAIL="{ \"event_type\": \"BUILD_DONE\", \"project_branch\":\"${BRANCH_NAME}\",\"project_type\":\"MICROSERVICE_CONTAINER\", \"project\":\"${GITHUB_PRJ_NAME}\", \"commit_id\": \"${CODEBUILD_RESOLVED_SOURCE_VERSION}\", \"image_url\":\"${IMAGE_URL_WITH_SHA}\" }"
                    echo $EVENT_DETAIL | jq -R -s '[{ "DetailType": "CiEvent","EventBusName": "CiEventBus", "Source":"Builder", "Detail": . }]' > ci_event.json
                    cat ci_event.json
                    aws events put-events --entries file://ci_event.json
                  fi
          reports: 
            SurefireReports:
              files:
                - '**/*'
              base-directory: 'target/surefire-reports'
          cache:
            paths:
              - '/root/.m2/**/*'
              - '/root/.sonar/**/*'
      TimeoutInMinutes: 20
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH, PULL_REQUEST_MERGED
            - Type: HEAD_REF
              Pattern: ^refs/heads/(main|develop)|(feature|hotfix|bug|release)\/.+$
          # - - Type: EVENT
          #     Pattern: PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_REOPENED
          #   - Type: BASE_REF
          #     Pattern: ^refs/heads/(main|develop)|release\/.*$

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CodeBuildGroup
                Effect: Allow
                Action:
                  - codebuild:*
                Resource:
                  - '*'
              - Sid: CodeBuildReportGroup
                Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource:
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
              - Sid: SendBuildEvents
                Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/CiEventBus'
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
              - Sid: BearerTokenPolicy
                Effect: Allow
                Action:
                  - sts:GetServiceBearerToken
                Resource: "*"
                Condition:
                  StringEquals:
                    'sts:AWSServiceName': codeartifact.amazonaws.com
              - Sid: GitHubSecret
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
              - Sid: CodeArtifactGetAuthorizationTokenPolicy
                Effect: Allow
                Action:
                  - codeartifact:GetAuthorizationToken
                Resource: !Sub 'arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:domain/${CodeArtifactDomainName}'
              - Sid: CodeArtifactRepository
                Effect: Allow
                Action:
                  - codeartifact:ReadFromRepository
                  - codeartifact:GetRepositoryEndpoint
                  - codeartifact:ListPackages
                Resource:
                  - !Sub 'arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:repository/${CodeArtifactDomainName}/${CodeArtifactRepositoryName}'
              - Sid: CodeArtifactPackage
                Effect: Allow
                Action:
                  - codeartifact:PublishPackageVersion
                  - codeartifact:PutPackageMetadata
                  - codeartifact:ReadFromRepository
                  - codeartifact:DescribePackageVersion
                  - 'codeartifact:List*'
                  - 'codeartifact:Get*'
                  - 'codeartifact:Read*'
                Resource:
                  - !Sub 'arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:package/${CodeArtifactDomainName}/${CodeArtifactRepositoryName}/*'
                  - !Sub 'arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:domain/${CodeArtifactDomainName}'
                  - !Sub 'arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:repository/${CodeArtifactDomainName}/${CodeArtifactRepositoryName}'
              - Sid: ElasticContainerReistry
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:CreateRepository
                  - ecr:DescribeImages
                  - ecr:DescribeRegistry
                  - ecr:DescribeRepositories
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:ListImages
                  - ecr:ListTagsForResource
                  - ecr:PutImage
                  - ecr:TagResource
                  - ecr:UntagResource
                  - ecr:UploadLayerPart
                Resource:
                  - "*"

  CodeBuildNotifications:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      DetailType: FULL
      Name: !Sub '${GitHubProjectName}-CI'
      EventTypeIds:
        - codebuild-project-build-state-failed
      Resource: !Sub '${CodeBuildProject.Arn}'
      Targets:
        - TargetAddress: !Ref 'NotificationSNSTopic'
          TargetType: SNS

  EcrRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: CreateEcr
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      RepositoryName: !Sub '${GitHubProjectName}'
      RepositoryPolicyText: !Sub '{
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "Allow cicd",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount1}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount2}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount3}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount4}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount5}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount6}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount7}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount8}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount9}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount10}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount11}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount12}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount13}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount14}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount15}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount16}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount17}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount18}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount19}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            },
            {
              "Sid": "Allow uat",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AllowedDeployAccount20}:root"
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            }
          ]
        }'
