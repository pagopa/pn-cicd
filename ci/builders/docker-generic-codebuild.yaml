AWSTemplateFormatVersion: '2010-09-09'
Description: CodeBuild for maven docker project
Parameters:
  GitHubProjectName:
    Description: Name of pagopa project name
    Type: String
    Default: pn-delivery
  GitHubDefaultBranch:
    Description: Name of the dafult github branch
    Type: String
    Default: main
  IsPublicProject:
    Description: true if the project is public
    Type: String
    Default: 'true'
  NotificationSNSTopic:
    Type: String
    Default: 'none'
    Description: Topic for build and pipeline notification
  ShouldCreateEcrParam:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: ECR creation is needed only the first time

  AllowedDeployAccount1:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount2:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount3:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount4:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount5:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount6:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount7:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount8:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount9:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount10:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount11:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount12:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount13:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount14:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount15:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount16:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount17:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount18:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount19:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount20:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount21:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount22:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount23:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount24:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount25:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount26:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount27:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount28:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount29:
    Type: Number
    Description: Account number allowed to read the artifacts
  AllowedDeployAccount30:
    Type: Number
    Description: Account number allowed to read the artifacts

Conditions:
  CreateEcr:
    Fn::Equals:
      - Ref: ShouldCreateEcrParam
      - 'true'

Resources:

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${GitHubProjectName}-CodeBuild"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        EnvironmentVariables:
          - Name: IS_PUBLIC_PROJECT
            Type: PLAINTEXT
            Value: !Sub "${IsPublicProject}"
          - Name: GITHUB_PRJ_NAME
            Type: PLAINTEXT
            Value: !Sub "${GitHubProjectName}"
          - Name: GIT_DEFAULT_BRANCH
            Type: PLAINTEXT
            Value: !Sub "${GitHubDefaultBranch}"
          - Name: ECR_URL
            Type: PLAINTEXT
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT
            Value: !Sub "${AWS::Region}"
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"

      Source:
        Type: GITHUB
        ReportBuildStatus: true
        Location: !Sub 'https://github.com/pagopa/${GitHubProjectName}'
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
            secrets-manager:
              SONAR_TOKEN: arn:aws:secretsmanager:eu-central-1:911845998067:secret:SonarCloud-7370vM:token
          phases:
            pre_build:
              on-failure: ABORT
              commands:
                - echo Logging in to Amazon ECR...
                - export ECR_TOKEN=$( aws ecr get-login-password --region $AWS_DEFAULT_REGION )
                - echo $ECR_TOKEN | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - BRANCH_NAME=$(echo $CODEBUILD_WEBHOOK_HEAD_REF | sed 's/refs\/heads\///'); export BRANCH_NAME=${BRANCH_NAME:=$GIT_DEFAULT_BRANCH}
                - export BRANCH_TARGET=$(echo $CODEBUILD_WEBHOOK_BASE_REF | sed 's/refs\/heads\///')
                - if echo $CODEBUILD_SOURCE_VERSION | grep -q ^pr/ ; then PR_NUM=$(echo $CODEBUILD_SOURCE_VERSION | sed 's/pr\///'); export PR_NUM; fi;
                - export CI_PROFILE="$CODEBUILD_CI"
                - export IMAGE_TAG=$VERSION
                - export IMAGE_REPO_NAME=$GITHUB_PRJ_NAME
                - export SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
                - |
                  if ( [ -z "${PR_NUM}" ] ) then
                    export PR_NUM=$(curl -L \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      "https://api.github.com/repos/pagopa/${GITHUB_PRJ_NAME}/pulls?state=all&sort=updated&direction=desc&head=pagopa:${BRANCH_NAME}" | jq -r '.[] | .number ' | head -1)
                      echo "PR_NUM=${PR_NUM}"
                  fi
                - |
                  if ( [ ! -z "${PR_NUM}" ] ) then
                    export BRANCH_TARGET=$(curl -L \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      "https://api.github.com/repos/pagopa/${GITHUB_PRJ_NAME}/pulls/${PR_NUM}" | jq '.base.ref')
                    echo "BRANCH_TARGET=${BRANCH_TARGET}"
                  fi
                - env
            build:
              on-failure: ABORT
              commands:
                - echo "Starting Docker build..."
                - docker build -t "${GITHUB_PRJ_NAME}:${VERSION}" .
            post_build:
              on-failure: ABORT
              commands:
                - |
                  echo "Ensure different image for each commit"
                  DOCKER_FILE=$(mktemp)
                  echo "FROM $ECR_URL/${GITHUB_PRJ_NAME}:$VERSION" >$DOCKER_FILE
                  echo "LABEL VCS_COMMIT_ID=${CODEBUILD_RESOLVED_SOURCE_VERSION}" >>$DOCKER_FILE
                  echo "ENV VCS_COMMIT_ID=${CODEBUILD_RESOLVED_SOURCE_VERSION}" >>$DOCKER_FILE
                  cat $DOCKER_FILE
                  echo Build completed on `date`
                  echo Pushing the Docker image...                    
                  docker build --tag "${GITHUB_PRJ_NAME}:${VERSION}" - < $DOCKER_FILE
                  if [[ "$BRANCH_NAME" =~ ^(main|develop)|(release|hotfix)\/.*$ ]]; then
                    echo "Deploy"
                    docker tag ${GITHUB_PRJ_NAME}:$VERSION $ECR_URL/${IMAGE_REPO_NAME}:$IMAGE_TAG
                    docker tag ${GITHUB_PRJ_NAME}:$VERSION $ECR_URL/${IMAGE_REPO_NAME}:$CODEBUILD_RESOLVED_SOURCE_VERSION
                    docker push $ECR_URL/${IMAGE_REPO_NAME}:$IMAGE_TAG
                    docker push $ECR_URL/${IMAGE_REPO_NAME}:$CODEBUILD_RESOLVED_SOURCE_VERSION
                    if [[ "$BRANCH_NAME" =~ ^main$ ]]; then
                      docker tag ${GITHUB_PRJ_NAME}:$VERSION $ECR_URL/${IMAGE_REPO_NAME}:latest
                      docker push $ECR_URL/${IMAGE_REPO_NAME}:latest
                      IMAGE_URL_WITH_SHA=$( docker inspect --format='{{index .RepoDigests 0}}' $ECR_URL/${IMAGE_REPO_NAME}:${IMAGE_TAG} )
                    else
                      IMAGE_URL_WITH_SHA=$( docker inspect --format='{{index .RepoDigests 0}}' $ECR_URL/${IMAGE_REPO_NAME}:${CODEBUILD_RESOLVED_SOURCE_VERSION} )
                    fi
                    docker image ls
                    echo Generate build event
                    
                    EVENT_DETAIL="{ \"event_type\": \"BUILD_DONE\", \"project_branch\":\"${BRANCH_NAME}\",\"project_type\":\"MICROSERVICE_CONTAINER\", \"project\":\"${GITHUB_PRJ_NAME}\", \"commit_id\": \"${CODEBUILD_RESOLVED_SOURCE_VERSION}\", \"image_url\":\"${IMAGE_URL_WITH_SHA}\" }"
                    echo $EVENT_DETAIL | jq -R -s '[{ "DetailType": "CiEvent","EventBusName": "CiEventBus", "Source":"Builder", "Detail": . }]' > ci_event.json
                    cat ci_event.json
                    aws events put-events --entries file://ci_event.json
                  else
                    echo "Deploy"
                    docker tag ${GITHUB_PRJ_NAME}:$VERSION $ECR_URL/${IMAGE_REPO_NAME}:latest_feature_bug
                    docker image ls
                    echo Build completed on `date`
                    echo Pushing the Docker image...
                    docker push $ECR_URL/${IMAGE_REPO_NAME}:latest_feature_bug

                    IMAGE_URL_WITH_SHA=$( docker inspect --format='{{index .RepoDigests 0}}' $ECR_URL/${IMAGE_REPO_NAME}:latest_feature_bug )
                    echo "Image Url with SHA = $IMAGE_URL_WITH_SHA"
                    echo "Commit Id = $CODEBUILD_RESOLVED_SOURCE_VERSION"
                  fi
          reports: 
            SurefireReports:
              files:
                - '**/*'
              base-directory: 'target/surefire-reports'
          cache:
            paths:
              - '/root/.m2/**/*'
              - '/root/.sonar/**/*'
      TimeoutInMinutes: 50
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH, PULL_REQUEST_MERGED
            - Type: HEAD_REF
              Pattern: ^refs/heads/(main|develop)|(feature|hotfix|bug|release)\/.+$
          # - - Type: EVENT
          #     Pattern: PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_REOPENED
          #   - Type: BASE_REF
          #     Pattern: ^refs/heads/(main|develop)|release\/.*$

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CodeBuildGroup
                Effect: Allow
                Action:
                  - codebuild:*
                Resource:
                  - '*'
              - Sid: CodeBuildReportGroup
                Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource:
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
              - Sid: SendBuildEvents
                Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/CiEventBus'
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
              - Sid: BearerTokenPolicy
                Effect: Allow
                Action:
                  - sts:GetServiceBearerToken
                Resource: "*"
                Condition:
                  StringEquals:
                    'sts:AWSServiceName': codeartifact.amazonaws.com
              - Sid: SonarCloudTokenSecret
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "arn:aws:secretsmanager:eu-central-1:911845998067:secret:SonarCloud-7370vM"
              - Sid: ElasticContainerReistry
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:CreateRepository
                  - ecr:DescribeImages
                  - ecr:DescribeRegistry
                  - ecr:DescribeRepositories
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:ListImages
                  - ecr:ListTagsForResource
                  - ecr:PutImage
                  - ecr:TagResource
                  - ecr:UntagResource
                  - ecr:UploadLayerPart
                Resource:
                  - "*"

  CodeBuildNotifications:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      DetailType: FULL
      Name: !Sub '${GitHubProjectName}-CI'
      EventTypeIds:
        - codebuild-project-build-state-failed
      Resource: !Sub '${CodeBuildProject.Arn}'
      Targets:
        - TargetAddress: !Ref 'NotificationSNSTopic'
          TargetType: SNS

  EcrRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: CreateEcr
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      RepositoryName: !Sub '${GitHubProjectName}'
      RepositoryPolicyText: !Sub '{
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "Allow cicd",
              "Effect": "Allow",
              "Principal": {
                "AWS": [ 
                  "arn:aws:iam::${AllowedDeployAccount1}:root",
                  "arn:aws:iam::${AllowedDeployAccount2}:root",
                  "arn:aws:iam::${AllowedDeployAccount3}:root",
                  "arn:aws:iam::${AllowedDeployAccount4}:root",
                  "arn:aws:iam::${AllowedDeployAccount5}:root",
                  "arn:aws:iam::${AllowedDeployAccount6}:root",
                  "arn:aws:iam::${AllowedDeployAccount7}:root",
                  "arn:aws:iam::${AllowedDeployAccount8}:root",
                  "arn:aws:iam::${AllowedDeployAccount9}:root",
                  "arn:aws:iam::${AllowedDeployAccount10}:root",
                  "arn:aws:iam::${AllowedDeployAccount11}:root",
                  "arn:aws:iam::${AllowedDeployAccount12}:root",
                  "arn:aws:iam::${AllowedDeployAccount13}:root",
                  "arn:aws:iam::${AllowedDeployAccount14}:root",
                  "arn:aws:iam::${AllowedDeployAccount15}:root",
                  "arn:aws:iam::${AllowedDeployAccount16}:root",
                  "arn:aws:iam::${AllowedDeployAccount17}:root",
                  "arn:aws:iam::${AllowedDeployAccount18}:root",
                  "arn:aws:iam::${AllowedDeployAccount19}:root",
                  "arn:aws:iam::${AllowedDeployAccount20}:root",
                  "arn:aws:iam::${AllowedDeployAccount21}:root",
                  "arn:aws:iam::${AllowedDeployAccount22}:root",
                  "arn:aws:iam::${AllowedDeployAccount23}:root",
                  "arn:aws:iam::${AllowedDeployAccount24}:root",
                  "arn:aws:iam::${AllowedDeployAccount25}:root",
                  "arn:aws:iam::${AllowedDeployAccount26}:root",
                  "arn:aws:iam::${AllowedDeployAccount27}:root",
                  "arn:aws:iam::${AllowedDeployAccount28}:root",
                  "arn:aws:iam::${AllowedDeployAccount29}:root",
                  "arn:aws:iam::${AllowedDeployAccount30}:root"
                ]
              },
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:DescribeRepositories",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            }
          ]
        }'
