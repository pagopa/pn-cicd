name: Create Frontend Release Action

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'GIT Repository project to run the workflow'
        required: true
        type: string
      tag:
        description: 'Tag value'
        required: true
        type: string
      increment_snapshot:
        description: 'Increment SNAPSHOT version in a branch next-release'
        type: boolean
        default: false
      base_branch:
        description: 'Base branch to create the RC TAG. Default is develop'
        type: string
        default: "develop"
        required: false

permissions: write-all

jobs:
  create-release:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITBOT_TOKEN_FOR_RELEASE }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.GITBOT_TOKEN_FOR_RELEASE }}
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0
      - name: setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - name: Set up NODE
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      
      # RC flow
      - name: run RC flow
        if: contains(inputs.tag, 'RC')
        run: |
          tag=${{ inputs.tag }}
          base_branch=$([ ${{ inputs.base_branch }}  = "" ] && echo "develop" || echo "${{ inputs.base_branch }}")
          echo "Creating RC tag: $tag"
          # Esegui git fetch
          git fetch
          # Sposta sul ramo $base_branch e allineati al ramo remoto
          git checkout $base_branch
          git pull origin $base_branch
          # get current monorepo version
          current_version=$(node -p "require('./lerna.json').version");
          # verifica esistenza branch release, nel caso esista gi√†, effettuare merge di $base_branch dentro il branch release
          release_branch_name=${current_version%-*} # da 0.0.1-RC.* a 0.0.1
          release_exists=$(git ls-remote origin release/"$release_branch_name" | wc -l)
          if [[ $release_exists -eq 1 ]]; then
            git checkout release/"$release_branch_name"
            git pull origin release/"$release_branch_name"
          else
            git checkout -b release/"$release_branch_name"
          fi
          git merge --no-edit $base_branch
          # aggiornare la versione di prerelease, creare tag RC e pushare tutto sul branch release
          npx lerna version prerelease --conventional-prerelease --no-push --preid --yes RC
          git push --atomic origin release/"$release_branch_name" "v$tag"

      # Release flow
      - name: run RELEASE flow
        if: "!contains(inputs.tag, 'RC')"
        run: |
          tag=${{ inputs.tag }}
          echo "Creating RELEASE tag: $tag"
          # Esegui git fetch
          git fetch
          # Sposta sul ramo develop e allineati al ramo remoto
          git checkout develop
          git pull origin develop
          
          echo "Creating RELEASE version $tag ..."
          release_exists=$(git ls-remote origin release/"$tag" | wc -l)
          if [[ $release_exists -eq 1 ]]; then
            git checkout release/$tag
            git pull origin release/$tag
          else
            echo "Branch release/$tag does not exit. Creating it from develop branch..."
            git checkout -b release/$tag
          fi
          # update alla versione $tag di release e generazione del changelog
          npx lerna version $tag --no-git-tag-version --conventional-commits --yes
          # commit e push dell'aggiornamento di versione
          git add '**/**/package.json' '**/**/CHANGELOG.md' lerna.json CHANGELOG.md
          git commit -m "[$tag] Create Release Version"
          git push origin release/$tag
          # merge del branch release e creo il tag su main
          git checkout main
          git pull origin main
          git merge release/$tag
          git push origin main
          # Crea il tag sul branch main (esempio v0.0.1)
          echo "Creating tag v$tag"
          gh release create v$tag --generate-notes --target main
          
        
