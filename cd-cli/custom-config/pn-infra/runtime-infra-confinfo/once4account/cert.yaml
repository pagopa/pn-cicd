AWSTemplateFormatVersion: 2010-09-09
Description: 'Template containing all the once-in-an-account configurations for dev accounts'

Parameters:
  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  SlackInfo:
    Type: String
    Description: <slack workspace id>:<slack channel id>. 'team_notifiche_dev_alarm' by default
    Default: '-'
  
  AlarmEmailAddress:
    Type: String
    Description: 'Email group address for dev alarm'
    Default: '-' 

Resources:

  ###                          DEFINE ALARM TOPIC                          ###
  ############################################################################
  # - Everything written to this topic is an alarm
  AlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'dev account alarms topic: send to SQS and slack'
  
  # - Alarm message queue
  AlarmHistoryBufferQueue:
    Type: AWS::SQS::Queue  

  # - Alarm message queue subscription
  AlarmSNSTopicToSqsHistoryBuffer:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt AlarmHistoryBufferQueue.Arn
      Region: !Ref AWS::Region
      TopicArn: !Ref AlarmSNSTopic
  
  # - Alarm message queue policy that grant write right to SNS
  AlarmSNSTopicToSqsHistoryPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref AlarmHistoryBufferQueue
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "sns.amazonaws.com"
            Action: "sqs:SendMessage"
            Resource: !Sub ${AlarmHistoryBufferQueue.Arn}
            Condition: 
              ArnEquals: 
                aws:SourceArn: !Ref AlarmSNSTopic
      
  # - Connect dev alarm to slack developers channel
  # AlarmSNSTopicSlackConnection:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sns-topic-to-slack-channel.yaml"
  #     Parameters:
  #       TopicName: 'dev_alarm'
  #       SNSTopicArn: !Ref AlarmSNSTopic
  #       SlackInfo: !Ref SlackInfo
  
  # - Connect dev alarm to email
  # - Send alarm message to email address
  # AlarmToEmail:
  #    Type: AWS::SNS::Subscription
  #    Properties: 
  #      TopicArn: !Ref AlarmSNSTopic
  #      Endpoint: !Ref AlarmEmailAddress
  #      Protocol: email


  # - Event Bridge events that generate an alarm
  # "ACM Certificate Approaching Expiration": alarm
  CertificateExpiringIsAlarmEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source: [ "aws.acm" ]
        detail-type: [ "ACM Certificate Approaching Expiration" ]
      Targets:
        - Arn: !Ref AlarmSNSTopic
          Id: "AlarmSnsTopic"

  ###              API GATEWAY ACCOUNT-GLOBAL CONFIGURATIONS              ###
  ###########################################################################
  # - Enable API-Gateway access log capability
  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"

  # - Grant CloudWatch write access permission to AWS API-Gateway
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

Outputs:

  AlarmSNSTopicArn:
    Value: !Ref AlarmSNSTopic
    Description: ARN of the Alarm SNS Topic
  
  AlarmSNSTopicName:
    Value: !GetAtt  AlarmSNSTopic.TopicName
    Description: Name of the Alarm SNS Topic

